// Copyright (c) 2011 Martin Ueding <dev@martin-ueding.de>

package jscribble;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Calendar;

import javax.swing.JOptionPane;

import jscribble.selectionWindow.NotebookSelectionWindow;

/**
 * The main program.
 *
 * @author Martin Ueding <dev@martin-ueding.de>
 */
public class NoteBookProgram {
	/**
	 * Stream for the logfile.
	 */
	private static BufferedOutputStream logfileStream;


	/**
	 * The folder where everything is stored.
	 */
	private static File dotDir = new File(System.getProperty("user.home") +
	        File.separator + "." + NoteBookProgram.getProgramname());


	/**
	 * Generates a "generated by <program name> <version>" string.
	 *
	 * @return version string
	 */
	public static String generatedComment() {
		return "generated by " + NoteBookProgram.getProgramname() + " " +
		       VersionName.version;
	}


	/**
	 * Getter for dotDir.
	 */
	public static File getDotDir() {
		return dotDir;
	}


	/**
	 * Returns the name of the program.
	 */
	public static String getProgramname() {
		return "jscribble";
	}


	/**
	 * Handles some error message centrally, right now it just displays a
	 * dialog box with the error message.
	 *
	 * @param errorMessage error message
	 */
	public static void handleError(String errorMessage) {
		log("ERROR", errorMessage);
		JOptionPane.showMessageDialog(null, errorMessage);
	}


	/**
	 * Creates the logfile and initializes the stream.
	 */
	private static void initLogfileOutstream() {
		try {
			logfileStream = new BufferedOutputStream(new FileOutputStream(
					File.createTempFile("jscribble-", ".log")));
		}
		catch (FileNotFoundException e) {
			handleError(Localizer.get("Cannot create logfile."));
			e.printStackTrace();
		} catch (IOException e) {
			handleError(Localizer.get("Cannot create temporary file."));
			e.printStackTrace();
		}
	}


	/**
	 * Writes a message to a log file.
	 *
	 * @param reportingClass name of the reporting class
	 * @param message message
	 */
	public static void log(String reportingClass, String message) {
		Calendar c = Calendar.getInstance();
		String date = String.format("%d-%02d-%02d %02d:%02d:%02d.%03d",
		        c.get(Calendar.YEAR),
		        c.get(Calendar.MONTH),
		        c.get(Calendar.DAY_OF_MONTH),
		        c.get(Calendar.HOUR_OF_DAY),
		        c.get(Calendar.MINUTE),
		        c.get(Calendar.SECOND),
		        c.get(Calendar.MILLISECOND)
		                           );
		String output =  date + " " + reportingClass + ":\t" + message;
		System.out.println(output);

		if (logfileStream != null) {
			try {
				logfileStream.write((output + "\n").getBytes());
			}
			catch (IOException e) {
				System.out.println(output);
				e.printStackTrace();
			}
		}
	}


	/**
	 * Displays the NotebookSelectionWindow.
	 *
	 * @param args CLI arguments
	 */
	public static void main(String[] args) {
		printVersionIfNeeded(args);

		initLogfileOutstream();

		log(getProgramname(), Localizer.get("Starting up."));

		showSelectionWindow();

		log(NoteBookProgram.class.getClass().getName(),
		    Localizer.get("Entering interactive mode."));
	}


	/**
	 * Prints version number and exists if there is a "--version" argument.
	 *
	 * @param args CLI arguments
	 */
	private static void printVersionIfNeeded(String[] args) {
		if (args.length > 0 && args[0].equals("--version")) {
			System.out.println(String.format(Localizer.get("Version: %s"),
			        VersionName.version));
			System.exit(0);
		}
	}


	/**
	 * Shows the NotebookSelectionWindow.
	 */
	private static void showSelectionWindow() {
		NotebookSelectionWindow nsw = new NotebookSelectionWindow();
		nsw.showDialog();
	}
}
